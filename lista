#Questão 1

def search_insert(lista, t):
  if len(lista)==0:
    return 0
  if len(lista)== 1:
    if lista[0]==t:
      return 0
    elif t>lista[0]:
      return 1
    else :
      return 0
  meio=len(lista)//2    
  if t > lista[meio] and meio+1<len(lista) and t< lista[meio+ 1]:
    return meio+1
  elif t > lista[meio]:
    p=search_insert(lista[meio:], t)
    return p + meio 
  elif t < lista[meio]:
    p=search_insert(lista[:meio], t)
    return p
  elif  t==lista[meio]:
    return meio
print(search_insert([-20, 2, 3, 5, 9, 10, 14, 17, 18, 42, 69, 76, 100],-10))

#Questão 2 item a)
def triangulo_pascal(n):
    if n==1:
        return [1]
    if n==2:
        return [[1], [1, 1]]
    la= triangulo_pascal(n-1) #calcula o triangulo com as n-1 primeiras linhas
    proxima_linha=[1]
    for i in range(1, n-1):
        numero= la[n-2][i-1]+la[n-2][i] #soma o elemento de cima com o da direita da linha anterior
        proxima_linha.append(numero)
    proxima_linha.append(1)
    la.append(proxima_linha) #cria uma lista de listas onde cada lista é uma linha do triângulo
    return la
print(triangulo_pascal(6))

#Questão 2 item b)
#A complexidade desse algoritmo é O(n²)

#Questão 3
class List_Node:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next
#item a) O(n) em que n é a quantidade de nós
class Linked_list:
    def __init__(self, head=None):
        self.head = head
        self.length = self.calculate_length()

    def calculate_length(self):
        atual = self.head
        contagem = 0
        while atual is not None:
            contagem += 1
            atual = atual.next
        return contagem
#item b) O(n), pois ele percorre toda a lista pra saber se é necessário deletar um nó
    def delete_node(self, target):
        if self.head is None:
            return None
        
        # Lidar com o caso onde o nó da cabeça em si precisa ser deletado
        while self.head and self.head.val == target:
            self.head = self.head.next
            self.length -= 1
        
        anterior = None
        atual = self.head

        while atual:
            if atual.val == target:
                if anterior:
                    anterior.next = atual.next
                self.length -= 1
            else:
                anteiro = atual
            atual = atual.next
#item c) O(n+m) n e m são os tamanhos das listas
    def __add__(self, other):
        if self.head is None:
            return other
        if other.head is None:
            return self
        
        # Copiar a primeira lista
        new_head = List_Node(self.head.val)
        new_atual = new_head
        atual = self.head.next

        while atual is not None:
            new_atual.next = List_Node(atual.val)
            new_atual = new_atual.next
            atual = atual.next

        # Copiar a segunda lista
        atual = other.head
        while atual is not None:
            new_atual.next = List_Node(atual.val)
            new_atual = new_atual.next
            atual = atual.next

        return Linked_list(new_head)

#Questão 4 que não funciona para coeficientes e graus com mais de um dígito :(
def polinomio(pol:str):
  pol = pol.replace('-', '+-')  # Adiciona + antes dos termos negativos para facilitar split
  termos = pol.split('+') 
  print (termos)
  dici={}
  for coisa in termos:
    coisa=list(coisa)
    if '-' not in coisa:
      if 'x' not in coisa:
        dici[0]=coisa[0]
      elif coisa[0]=='x':
        dici[coisa[len(coisa)-1]]=1
      else:
        for i in range(len(coisa)): 
          if coisa[len(coisa)-1]=='x':
            dici[1]=coisa[0]
          else:
            dici[len(coisa)-1]= coisa[0]
    else:
       if 'x' not in coisa:
        dici[0]=(-1)*int(coisa[1])
       elif coisa[1]=='x':
        dici[coisa[len(coisa)]-1]=-1
       else:
        for i in range(len(coisa)): 
          if coisa[len(coisa)-1]=='x':
            dici[1]=(-1)*int(coisa[1])
          else:
            dici[coisa[len(coisa)-1]]= (-1)*int(coisa[0])
  
  print(dici)


polinomio('x^2-4x')
